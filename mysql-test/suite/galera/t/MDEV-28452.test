#
# Test for MDEV-28452: wsrep_ready: OFF after MDL BF-BF conflict
#

--source include/galera_cluster.inc
--source include/have_debug.inc
--source include/have_debug_sync.inc

--connect node_2a, 127.0.0.1, root, , test, $NODE_MYPORT_2

--connection node_1

# create two tables
CREATE TABLE `user` (
  `id` char(36) COLLATE utf8mb4_unicode_ci NOT NULL,
  `environment_id` char(36) COLLATE utf8mb4_unicode_ci NOT NULL,
  `username` varchar(64) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `password` char(60) COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` enum('sign_up','invited','active','archived')
           COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'invited',
  `last_login` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `user_username_unique` (`username`),
  KEY `user_environment_id_index` (`environment_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

 
CREATE TABLE `log_history_daily` (
  `type` enum('unknown','user','developer','api_key','api_env',
         'mail_token','device') COLLATE utf8mb4_unicode_ci NOT NULL,
  `status` enum('valid','invalid') COLLATE utf8mb4_unicode_ci NOT NULL,
  `origin` enum('unknown','browser','go','android','ios','third_party')
           COLLATE utf8mb4_unicode_ci NOT NULL DEFAULT 'unknown',
  `ip` varchar(45) COLLATE utf8mb4_unicode_ci NOT NULL,
  `value` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `user_id` char(36) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `date` date NOT NULL,
  PRIMARY KEY (`type`,`status`,`origin`,`ip`,`value`,`date`),
  KEY `log_history_daily_user_id_foreign` (`user_id`),
  CONSTRAINT `log_history_daily_user_id_foreign` FOREIGN KEY (`user_id`)
             REFERENCES `user` (`id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

SET SESSION autocommit = 0;

# insert one row in each table
INSERT INTO `user` VALUES ("id_1", "abc", "user 1", "secret", "active", NULL);
INSERT INTO `log_history_daily` VALUES ("user", "valid", "unknown",
       "192.168.0.1", "Sample", "id_1", "2024-04-22");
COMMIT;

# Start two slave threads in node 2.
# Set up a synchronizaton point (sync.mdev_28452) for slave thread 1
# where the thread stops when it holds an exclusive metadata lock
# (MDL_EXCLUSIVE) for the OPTIMIZE TABLE statement (see below).
--connection node_2
SET GLOBAL wsrep_slave_threads = 2;
SELECT @@wsrep_slave_threads;
SET GLOBAL debug_dbug = "+d,sync.mdev_28452";

# Run two transactions sequentially on node 1:
# 1) OPTIMIZE TABLE on the child table of the foreign key constraint,
--connection node_1
OPTIMIZE TABLE `log_history_daily`;
COMMIT;

# 2) and UPDATE on the parent table of the foreign key constraint.
# update the row in "user" so that it affects the foreign key in
# "log_history_daily"
UPDATE `user` SET `last_login` = '2024-04-23' WHERE `id`="id_1";
COMMIT;

# allow the stopped OPTIMIZE TABLE transaction to proceed
--connection node_2a
--sleep 5
SET GLOBAL debug_dbug = 'RESET';
SET DEBUG_SYNC = 'now SIGNAL signal.mdev_28452';
SET DEBUG_SYNC = 'RESET';

# wait till the UPDATE has finished on node 2
--let $wait_condition = SELECT COUNT(*) > 0 FROM `user` WHERE `last_login` = '2024-04-23'
--source include/wait_condition.inc

# cleanup
--connection node_1
DROP TABLE `log_history_daily`;
DROP TABLE `user`;
--connection node_2
SET GLOBAL wsrep_slave_threads = DEFAULT;
