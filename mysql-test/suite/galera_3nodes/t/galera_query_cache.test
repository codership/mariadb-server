--source include/big_test.inc
--source include/force_restart.inc
--source include/galera_cluster.inc

#
# MDEV-28641 : Query cache entries not invalidated on slave of a Galera cluster
#
# We use two 3-node galera clusters as follows
#
#       A(1) <-> B(2) <-> C(3)     {Galera cluster 1}
#       |                          {Async replication}
#       D(4) <-> E(5) <-> F(6)     {Galera cluster 2}
#
# Normal asyncronous replication is used between nodes 1 and 4
# so that node_1 is master and node_4 a slave.
#
# In this test we can't test is some query fast or slow but we can
# test does all nodes see all rows (this is not true before fix)
#
--connect node_3, 127.0.0.1, root, , test, $NODE_MYPORT_3
--connect node_4, 127.0.0.1, root, , test, $NODE_MYPORT_4
--connect node_5, 127.0.0.1, root, , test, $NODE_MYPORT_5
--connect node_6, 127.0.0.1, root, , test, $NODE_MYPORT_6

--connection node_2
call mtr.add_suppression("WSREP: Ignoring server id for non bootstrap node.");
--connection node_3
call mtr.add_suppression("WSREP: Ignoring server id for non bootstrap node.");
--connection node_5
call mtr.add_suppression("WSREP: Ignoring server id for non bootstrap node.");
--connection node_6
call mtr.add_suppression("WSREP: Ignoring server id for non bootstrap node.");

--connection node_4

--replace_result $NODE_MYPORT_1 NODE_MYPORT_1
--eval CHANGE MASTER TO master_host='127.0.0.1', master_user='root', master_port=$NODE_MYPORT_1, master_use_gtid=current_pos;
START SLAVE;
--source include/wait_for_slave_to_start.inc

--connection node_1

CREATE TABLE t1 (id bigint primary key auto_increment, msg varchar(100)) engine=innodb;
INSERT INTO t1 SELECT NULL, md5(rand());
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 SELECT NULL, md5(rand()) from t1 LIMIT 1000000;
INSERT INTO t1 values (NULL, 'foobar');

--sync_slave_with_master node_4

#
# All nodes should see one row and first query is slow and second fast
#
--connection node_1
--echo # node_1
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_2
--echo # node_2
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_3
--echo # node_3
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_4
--echo # node_4
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_5
--echo # node_5
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_6
--echo # node_6
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';

#
# Insert a new row in master, this should cause query cache
# invalidation
#
--connection node_1
--echo # node_1 insert new
INSERT INTO t1 values (5000000000, 'foobar');
--sync_slave_with_master node_4

#
# All nodes should see 2 rows
#
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';

--connection node_2
--echo # node_2
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_3
--echo # node_3
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_4
--echo # node_4
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_5
--echo # node_5
set profiling=1;
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';
--connection node_6
--echo # node_6
SELECT * FROM t1 WHERE msg='foobar';
SELECT * FROM t1 WHERE msg='foobar';

--connection node_3
--echo # node_3 different query same table
SELECT id, msg FROM t1 WHERE msg='foobar';

--connection node_6
--echo # node_6 different query same table
SELECT id, msg FROM t1 WHERE msg='foobar';

#
# Cleanup
#
--connection node_1
drop table t1;
--sync_slave_with_master node_4

--connection node_4
STOP SLAVE;
RESET SLAVE ALL;

--connection node_1
SET SESSION WSREP_ON=OFF;
RESET MASTER;
SET SESSION WSREP_ON=ON;

--source include/galera_end.inc
--echo # End of test
