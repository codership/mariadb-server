--let $galera_shards= 2
--let $galera_shard_size= 2

--source include/galera_spider_init.inc

# setup tables
# -------------------
--source include/create_test_tables.inc

# Spider's internal XA
# ------------------
--connection spider_1
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET LOCAL spider_internal_xa=1;
--connection spider_2
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET LOCAL spider_internal_xa=1;

# BF abort happens when 'xa prepare' is issued at shard 1
# ----------------------------
--connection spider_1
INSERT INTO hashpart values (1,'0'), (2,'0');
BEGIN;
UPDATE hashpart SET val='1' WHERE id=1;
UPDATE hashpart SET val='1' WHERE id=2;
select SPIDER_DIRECT_SQL('SET DEBUG_SYNC= "before_xa_prepare SIGNAL at_prepared WAIT_FOR done"', '', 'srv "node_1_1"');
--send COMMIT;

--connection node_1_1
SET DEBUG_SYNC= 'now WAIT_FOR at_prepared';

--connection spider_2
UPDATE hashpart set val='2' where id=1;  # trigger BF abort on shard 1, which ALSO wakes the thread from the sync point

--connection spider_1
--error 1180 # TODO: improve spider's error - "ERROR HY000: Got error 1614 "Unknown error 1614" during COMMIT"
--reap
SELECT * FROM hashpart;
--echo # expect entry for shard 1 to remain in the table
SELECT count(*) `expect 1` FROM mysql.spider_xa_member;
--echo # expect entry for the XA transaction
SELECT status FROM mysql.spider_xa;
SELECT count(*) `expect 0` FROM mysql.spider_xa_failed_log;

TRUNCATE mysql.spider_xa_member;
TRUNCATE mysql.spider_xa;
TRUNCATE hashpart;


# # BF abort happens when 'xa prepare' is issued at shard 2
# # ----------------------------

--connection spider_1
INSERT INTO hashpart values (1,'0'), (2,'0');
BEGIN;
UPDATE hashpart SET val='1' WHERE id=1;
UPDATE hashpart SET val='1' WHERE id=2;
select SPIDER_DIRECT_SQL('SET DEBUG_SYNC= "before_xa_prepare SIGNAL at_prepared WAIT_FOR done"', '', 'srv "node_2_1"');
--send COMMIT;

--connection node_2_1
SET DEBUG_SYNC= 'now WAIT_FOR at_prepared';

--connection spider_2
UPDATE hashpart set val='2' where id=2;  # trigger BF abort on shard 2, which ALSO wakes the thread from the sync point

--connection spider_1
--error 1180
--reap
SELECT * FROM hashpart;
--echo # expect entries from both participant shards to remain in the table
SELECT count(*) `expect 2` FROM mysql.spider_xa_member;
--echo # expect entry for the XA transaction
SELECT status FROM mysql.spider_xa;
SELECT count(*) `expect 0` FROM mysql.spider_xa_failed_log;

TRUNCATE mysql.spider_xa_member;
TRUNCATE mysql.spider_xa;
TRUNCATE hashpart;

# clear DEBUG_SYNC so MTR doesn't complain
--connection node_1_1
SET DEBUG_SYNC= 'RESET';
--connection node_2_1
SET DEBUG_SYNC= 'RESET';

# cleanup tables
# ----------------------
--source include/drop_test_tables.inc

--source include/galera_spider_end.inc
