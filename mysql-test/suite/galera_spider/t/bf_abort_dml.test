--let $galera_shards= 2
--let $galera_shard_size= 2

--source include/galera_spider_init.inc

# setup tables
# -------------------
--source include/create_test_tables.inc


# enable Spider's internal XA
# ------------------
--connection spider_1
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET LOCAL spider_internal_xa=1;
--connection spider_2
SET TRANSACTION ISOLATION LEVEL REPEATABLE READ;
SET LOCAL spider_internal_xa=1;


# BF abort happens on statement in shard 1
# ----------------------------

--connection spider_1
INSERT INTO hashpart values (1,'0'), (2,'0');
BEGIN;
UPDATE hashpart SET val='1' WHERE id=1;
UPDATE hashpart SET val='1' WHERE id=2;

--connection spider_2
UPDATE hashpart set val='2' where id=1;  # trigger BF abort on shard 1

--connection spider_1
--error 1213 # deadlock error
INSERT INTO hashpart values (3, '1');

# TODO: the following should have no effect after the rollback
INSERT INTO hashpart values (9,'9');

# Spider doesn't rollback the transaction, which is in line with how MariaDB handles XA transaction errors.
# TODO: But from the client's POV, this is a "normal" transaction, shouldn't it be rollback?
ROLLBACK;
SELECT * FROM hashpart;

SELECT count(*) `expect 0` FROM mysql.spider_xa_member;
SELECT count(*) `expect 0` FROM mysql.spider_xa;
SELECT count(*) `expect 0` FROM mysql.spider_xa_failed_log;
TRUNCATE mysql.spider_xa_member;
TRUNCATE mysql.spider_xa;
TRUNCATE hashpart;


# BF abort happens on statement in shard 2
# ----------------------------

--connection spider_1
INSERT INTO hashpart values (1,'0'), (2,'0');
BEGIN;
UPDATE hashpart SET val='1' WHERE id=1;
UPDATE hashpart SET val='1' WHERE id=2;

--connection spider_2
UPDATE hashpart set val='2' where id=2;  # trigger BF abort on shard 2

--connection spider_1
--error 1213 # deadlock error
INSERT INTO hashpart values (4, '1');

# TODO: the following should have no effect after the rollback
INSERT INTO hashpart values (9,'9');

ROLLBACK;
SELECT * FROM hashpart;

SELECT count(*) `expect 0` FROM mysql.spider_xa_member;
SELECT count(*) `expect 0` FROM mysql.spider_xa;
SELECT count(*) `expect 0` FROM mysql.spider_xa_failed_log;
TRUNCATE mysql.spider_xa_member;
TRUNCATE mysql.spider_xa;
TRUNCATE hashpart;


# User tries to COMMIT after a BF abort
# ----------------------------

--connection spider_1
INSERT INTO hashpart values (1,'0'), (2,'0');
BEGIN;
UPDATE hashpart SET val='1' WHERE id=1;
UPDATE hashpart SET val='1' WHERE id=2;

--connection spider_2
UPDATE hashpart set val='2' where id=2;  # trigger BF abort on shard 2

--connection spider_1
--error 1213 # deadlock error
INSERT INTO hashpart values (4, '1');

# TODO: the following should have no effect after the rollback
INSERT INTO hashpart values (9,'9');

# TODO: expect the correct error.
--error 1180 # TODO: improve spider error - "Got error 1614 "Unknown error 1614" during COMMIT"
COMMIT;
SELECT * FROM hashpart;

--echo # expect entries for both participant shards
SELECT scheme, socket, host, port FROM mysql.spider_xa_member;
--echo # expect entry for the failed XA
SELECT status FROM mysql.spider_xa;
SELECT count(*) `expect 0` FROM mysql.spider_xa_failed_log;
TRUNCATE mysql.spider_xa_member;
TRUNCATE mysql.spider_xa;
TRUNCATE hashpart;


# cleanup tables
# ----------------------
--source include/drop_test_tables.inc

--source include/galera_spider_end.inc
